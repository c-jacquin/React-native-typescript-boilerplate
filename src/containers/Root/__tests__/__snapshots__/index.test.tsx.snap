// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Root component should renders correctly 1`] = `
<View
  style={
    Array [
      Object {
        "flex": 1,
      },
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <View
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "column-reverse",
          },
          Object {
            "backgroundColor": "#000",
          },
        ]
      }
    >
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          collapsable={undefined}
          pointerEvents="auto"
          style={
            Object {
              "backgroundColor": "#E9E9EF",
              "bottom": 0,
              "left": 0,
              "opacity": 1,
              "position": "absolute",
              "right": 0,
              "shadowColor": "black",
              "shadowOffset": Object {
                "height": 0,
                "width": 0,
              },
              "shadowOpacity": 0.2,
              "shadowRadius": 5,
              "top": 0,
              "transform": Array [
                Object {
                  "translateX": 0,
                },
                Object {
                  "translateY": 0,
                },
              ],
            }
          }
        >
          <RCTScrollView>
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={undefined}
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={undefined}
                >
                  Hello World
                </Text>
              </Text>
            </View>
          </RCTScrollView>
        </View>
      </View>
      <View
        cardStyle={undefined}
        collapsable={undefined}
        getScreenDetails={[Function]}
        headerMode={undefined}
        index={0}
        layout={
          Object {
            "height": 0,
            "initHeight": 0,
            "initWidth": 0,
            "isMeasured": false,
            "width": 0,
          }
        }
        leftInterpolator={[Function]}
        mode="float"
        navigation={
          Object {
            "dispatch": [Function],
            "goBack": [Function],
            "navigate": [Function],
            "setParams": [Function],
            "state": Object {
              "index": 0,
              "routes": Array [
                Object {
                  "key": "test",
                  "routeName": "Home",
                },
              ],
            },
          }
        }
        rightInterpolator={[Function]}
        router={
          Object {
            "getActionForPathAndParams": [Function],
            "getComponentForRouteName": [Function],
            "getComponentForState": [Function],
            "getPathAndParamsForState": [Function],
            "getScreenConfig": [Function],
            "getScreenOptions": [Function],
            "getStateForAction": [Function],
          }
        }
        titleInterpolator={[Function]}
        transitionConfig={undefined}
      >
        <View
          collapsable={undefined}
          onLayout={[Function]}
          style={
            Object {
              "backgroundColor": "#F7F7F7",
              "borderBottomColor": "rgba(0, 0, 0, .3)",
              "borderBottomWidth": 0.5,
              "height": 64,
              "paddingBottom": 0,
              "paddingLeft": 0,
              "paddingRight": 0,
              "paddingTop": 20,
            }
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  },
                  Object {
                    "flexDirection": "row",
                  },
                ]
              }
            >
              <View
                collapsable={undefined}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "transparent",
                    "bottom": 0,
                    "justifyContent": "center",
                    "left": 0,
                    "opacity": 1,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <Text
                  accessibilityTraits="header"
                  accessible={true}
                  allowFontScaling={true}
                  collapsable={undefined}
                  ellipsizeMode="tail"
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgba(0, 0, 0, .9)",
                      "fontSize": 17,
                      "fontWeight": "600",
                      "marginHorizontal": 16,
                      "textAlign": "center",
                    }
                  }
                >
                  Home
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;

exports[`Root component should renders correctly without getLocale prop 1`] = `
<View
  style={
    Array [
      Object {
        "flex": 1,
      },
    ]
  }
>
  <View
    onLayout={[Function]}
    style={
      Array [
        Object {
          "flex": 1,
        },
      ]
    }
  >
    <View
      onMoveShouldSetResponder={[Function]}
      onMoveShouldSetResponderCapture={[Function]}
      onResponderEnd={[Function]}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderReject={[Function]}
      onResponderRelease={[Function]}
      onResponderStart={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      onStartShouldSetResponderCapture={[Function]}
      style={
        Array [
          Object {
            "flex": 1,
            "flexDirection": "column-reverse",
          },
          Object {
            "backgroundColor": "#000",
          },
        ]
      }
    >
      <View
        style={
          Object {
            "flex": 1,
          }
        }
      >
        <View
          collapsable={undefined}
          pointerEvents="auto"
          style={
            Object {
              "backgroundColor": "#E9E9EF",
              "bottom": 0,
              "left": 0,
              "opacity": 1,
              "position": "absolute",
              "right": 0,
              "shadowColor": "black",
              "shadowOffset": Object {
                "height": 0,
                "width": 0,
              },
              "shadowOpacity": 0.2,
              "shadowRadius": 5,
              "top": 0,
              "transform": Array [
                Object {
                  "translateX": 0,
                },
                Object {
                  "translateY": 0,
                },
              ],
            }
          }
        >
          <RCTScrollView>
            <View>
              <Text
                accessible={true}
                allowFontScaling={true}
                ellipsizeMode="tail"
                style={undefined}
              >
                <Text
                  accessible={true}
                  allowFontScaling={true}
                  ellipsizeMode="tail"
                  style={undefined}
                >
                  Hello World
                </Text>
              </Text>
            </View>
          </RCTScrollView>
        </View>
      </View>
      <View
        cardStyle={undefined}
        collapsable={undefined}
        getScreenDetails={[Function]}
        headerMode={undefined}
        index={0}
        layout={
          Object {
            "height": 0,
            "initHeight": 0,
            "initWidth": 0,
            "isMeasured": false,
            "width": 0,
          }
        }
        leftInterpolator={[Function]}
        mode="float"
        navigation={
          Object {
            "dispatch": [Function],
            "goBack": [Function],
            "navigate": [Function],
            "setParams": [Function],
            "state": Object {
              "index": 0,
              "routes": Array [
                Object {
                  "key": "test",
                  "routeName": "Home",
                },
              ],
            },
          }
        }
        rightInterpolator={[Function]}
        router={
          Object {
            "getActionForPathAndParams": [Function],
            "getComponentForRouteName": [Function],
            "getComponentForState": [Function],
            "getPathAndParamsForState": [Function],
            "getScreenConfig": [Function],
            "getScreenOptions": [Function],
            "getStateForAction": [Function],
          }
        }
        titleInterpolator={[Function]}
        transitionConfig={undefined}
      >
        <View
          collapsable={undefined}
          onLayout={[Function]}
          style={
            Object {
              "backgroundColor": "#F7F7F7",
              "borderBottomColor": "rgba(0, 0, 0, .3)",
              "borderBottomWidth": 0.5,
              "height": 64,
              "paddingBottom": 0,
              "paddingLeft": 0,
              "paddingRight": 0,
              "paddingTop": 20,
            }
          }
        >
          <View
            style={
              Object {
                "flex": 1,
              }
            }
          >
            <View
              style={
                Array [
                  Object {
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                  },
                  Object {
                    "flexDirection": "row",
                  },
                ]
              }
            >
              <View
                collapsable={undefined}
                pointerEvents="box-none"
                style={
                  Object {
                    "alignItems": "center",
                    "backgroundColor": "transparent",
                    "bottom": 0,
                    "justifyContent": "center",
                    "left": 0,
                    "opacity": 1,
                    "position": "absolute",
                    "right": 0,
                    "top": 0,
                    "transform": Array [
                      Object {
                        "translateX": 0,
                      },
                    ],
                  }
                }
              >
                <Text
                  accessibilityTraits="header"
                  accessible={true}
                  allowFontScaling={true}
                  collapsable={undefined}
                  ellipsizeMode="tail"
                  numberOfLines={1}
                  onLayout={[Function]}
                  style={
                    Object {
                      "color": "rgba(0, 0, 0, .9)",
                      "fontSize": 17,
                      "fontWeight": "600",
                      "marginHorizontal": 16,
                      "textAlign": "center",
                    }
                  }
                >
                  Home
                </Text>
              </View>
            </View>
          </View>
        </View>
      </View>
    </View>
  </View>
</View>
`;
